// global vars color and buffer x/y and controlp5
int x, y;
PGraphics buffer;
int grayScale = 0;
import controlP5.*;
int redColor = 255;
int blueColor = 255;
int greenColor = 255;
int colorOneRed = 255;
int colorOneBlue = 255;
int colorOneGreen = 255;
int colorTwoRed = 255;
int colorTwoBlue = 255;
int colorTwoGreen = 255;
ControlP5 cp5;

int state; // different cases
int lineThickness = 3;
void setup() {
  size(400, 600);
  //create buffer
  cp5 = new ControlP5(this);
  buffer = createGraphics(400, 600); 
  buffer.beginDraw();
  buffer.strokeWeight(lineThickness);
  buffer.stroke(colorOneRed, colorOneGreen, colorOneBlue);
  buffer.background(205);
  buffer.endDraw();
  ellipseMode(CORNER);
// buttons for corresponding function
  cp5.addButton("pencil")
    .setPosition(100, 100)
    .setSize(200, 19)
    ;
  cp5.addButton("eraser")
    .setPosition(100, 80)
    .setSize(200, 19)
    ;
  cp5.addSlider("grayScale")
    .setPosition(100, 20)
    .setRange(0, 255)
    .setValue(128)
    ;
    cp5.addSlider("lineThickness")
    .setPosition(100, 30)
    .setRange(1, 20)
    ;
  cp5.addButton("colorOne")
    .setPosition(100, 120)
    .setSize(200, 19)
    ;
  cp5.addButton("colorTwo")
    .setPosition(100, 140)
    .setSize(200, 19)
    ;
  cp5.addButton("Line")
    .setPosition(100, 160)
    .setSize(200, 19)
    ;
  cp5.addButton("Rectangle")
    .setPosition(100, 180)
    .setSize(200, 19)
    ;
  cp5.addButton("Ellipse")
    .setPosition(100, 200)
    .setSize(200, 19)
    ;
  cp5.addSlider("redColor")
    .setPosition(100, 40)
    .setRange(0, 255)
    ;
  cp5.addSlider("greenColor")
    .setPosition(100, 50)
    .setRange(0, 255)
    ;
  cp5.addSlider("blueColor")
    .setPosition(100, 60)
    .setRange(0, 255)
    ;
// default state
  state = 0;
}
//functions switching states for different buttons/uses
void pencil() {
  println("pencil");
  state = 1;
}
void colorOne() {
  println("colorOne");
  state=3;
  println();
}
void colorTwo() {
  println("colorTwo");
  state=4;
  println();
}
void eraser() {
  println("eraser");
  state = 2;
}
void Line() {
  println("line");
  state = 5;
}
void Rectangle() {
  state = 6;
}
void Ellipse() {
  state = 7;
}

//draw shapes
void draw() {
  //buffering
  image(buffer, 0, 0);
  stroke(colorOneRed, colorOneGreen, colorOneBlue);
  fill(colorTwoRed, colorTwoGreen, colorTwoBlue);
  switch(state) {
  case 5: // line
    if (mousePressed)
      line(x, y, mouseX, mouseY); //show growth while the mouse is presssed
    break;
  case 6: // rectangle
    if (mousePressed)
      rect(x, y, mouseX-x, mouseY-y); //show growth while the mouse is presssed
    break;
  case 7: // ellipse
    if (mousePressed)
      ellipse(x, y, mouseX-x, mouseY-y); //show growth while the mouse is presssed
    break;
  }
  //diff color picker (custom)
  stroke(0);
  fill(colorOneRed, colorOneGreen, colorOneBlue);
  rect(20, 525, 50, 50);

  fill(colorTwoRed, colorTwoGreen, colorTwoBlue);
  rect(50, 500, 50, 50);
}

void mouseDragged() {
  switch(state) {
  case 0: //Default
    break;
  case 1: //Pencil
    println("drawing");
    buffer.beginDraw();
    buffer.stroke(colorOneRed, colorOneGreen, colorOneBlue);
    buffer.line(pmouseX, pmouseY, mouseX, mouseY);
    buffer.endDraw();
    break;
  case 2: // eraser
    println("erasing");
    stroke(205);
    fill(205);
    ellipse(mouseX, mouseY, 10, 10);
    break;
  }
}

void mousePressed() {
  //save intial anchor point of the line
    x = mouseX;
  y = mouseY;
  switch(state) {
  case 3: //colorOne
    println("colorOne");
    colorOneRed = redColor;
    colorOneGreen = greenColor;
    colorOneBlue = blueColor;
    break;
  case 4: //colorTwo
    println("colorTwo");
    colorTwoRed = redColor;
    colorTwoGreen = greenColor;
    colorTwoBlue = blueColor;
    break;
  }
}

void mouseReleased() {
  switch(state) {
  case 1: 
    buffer.beginDraw();
    buffer.line(pmouseX, pmouseY, mouseX, mouseY);
    buffer.endDraw();
    break;
  case 5:
    //add line to buffer!
    buffer.beginDraw();
    buffer.stroke(colorOneRed, colorOneGreen, colorOneBlue);
    buffer.line(x, y, mouseX, mouseY);
    buffer.endDraw();
    break;
  case 6:
    buffer.beginDraw(); // rect
    buffer.stroke(colorOneRed, colorOneGreen, colorOneBlue);
     buffer.fill(colorTwoRed, colorTwoGreen, colorTwoBlue);
    buffer.rect(x, y, mouseX-x, mouseY-y);
    buffer.endDraw();
    break;
  case 7: // ellipse
    buffer.beginDraw();
    buffer.stroke(colorOneRed, colorOneGreen, colorOneBlue);
    buffer. fill(colorTwoRed, colorTwoGreen, colorTwoBlue);
    buffer.ellipseMode(CORNER);
    buffer.ellipse(x, y, mouseX-x, mouseY-y);
    buffer.endDraw();
    break;
  }
}
//1. Define a controller function for eraser

//2. Define a controller function for grayscale slider 
//   *use the int value parameter to get the current value of the slider

//3. Define controller functions for RGB sliders

//4. Define controller functions for stroke thickness
